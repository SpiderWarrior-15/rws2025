import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Plus, Edit, Trash2, Megaphone, Clock, User, AlertCircle, CheckCircle, Info, Trophy, Brain, Users, Newspaper, Crown } from 'lucide-react';
import { GlassCard } from '../components/GlassCard';
import { AnimatedButton } from '../components/AnimatedButton';
import { useLocalStorage } from '../hooks/useLocalStorage';
import { useAuth } from '../hooks/useAuth';
import { useRealtime } from '../contexts/RealtimeContext';
import { format } from 'date-fns';
import { UserAccount, PuzzleAttempt, NewsArticle } from '../types';

interface Announcement {
  id: string;
  title: string;
  content: string;
  type: 'info' | 'warning' | 'success' | 'urgent' | 'achievement' | 'news' | 'welcome';
  author: string;
  createdAt: string;
  updatedAt?: string;
  isActive: boolean;
  priority: 'low' | 'medium' | 'high';
  autoGenerated?: boolean;
  relatedData?: any;
}

export const Announcements: React.FC = () => {
  const { user } = useAuth();
  const { broadcastUpdate, subscribe } = useRealtime();
  const [announcements, setAnnouncements] = useLocalStorage<Announcement[]>('rws-announcements', []);
  const [accounts] = useLocalStorage<UserAccount[]>('rws-accounts', []);
  const [attempts] = useLocalStorage<PuzzleAttempt[]>('rws-puzzle-attempts', []);
  const [newsArticles] = useLocalStorage<NewsArticle[]>('rws-news', []);
  const [isAddingNew, setIsAddingNew] = useState(false);
  const [editingAnnouncement, setEditingAnnouncement] = useState<Announcement | null>(null);
  const [newAnnouncement, setNewAnnouncement] = useState({
    title: '',
    content: '',
    type: 'info' as const,
    priority: 'medium' as const
  });

  const isAdmin = user?.accountType === 'admin';

  // Auto-generate announcements based on system activities
  useEffect(() => {
    const generateAutoAnnouncements = () => {
      const now = new Date();
      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
      
      // Check for new warriors (approved accounts)
      const newWarriors = accounts.filter(acc => 
        acc.status === 'approved' && 
        acc.approvedAt && 
        new Date(acc.approvedAt) > oneHourAgo &&
        !announcements.some(a => a.relatedData?.userId === acc.id && a.type === 'welcome')
      );

      // Check for high-scoring puzzle attempts
      const recentHighScores = attempts.filter(att => 
        att.isCorrect === true && 
        att.score >= 15 && 
        new Date(att.submittedAt) > oneHourAgo &&
        !announcements.some(a => a.relatedData?.attemptId === att.id && a.type === 'achievement')
      );

      // Check for new news articles
      const recentNews = newsArticles.filter(article => 
        new Date(article.publishedAt) > oneHourAgo &&
        !announcements.some(a => a.relatedData?.articleId === article.id && a.type === 'news')
      );

      const newAnnouncements: Announcement[] = [];

      // Generate welcome announcements for new warriors
      newWarriors.forEach(warrior => {
        newAnnouncements.push({
          id: `welcome_${warrior.id}_${Date.now()}`,
          title: `🎉 Welcome New Warrior!`,
          content: `${warrior.name} has joined the Royal Warriors Squad! Let's give them a warm welcome to our elite brotherhood. May their journey be filled with victories and legendary achievements!`,
          type: 'welcome',
          author: 'Royal Warriors Squad',
          createdAt: new Date().toISOString(),
          isActive: true,
          priority: 'medium',
          autoGenerated: true,
          relatedData: { userId: warrior.id, userName: warrior.name }
        });
      });

      // Generate achievement announcements for high scores
      recentHighScores.forEach(attempt => {
        const warrior = accounts.find(acc => acc.id === attempt.userId);
        if (warrior) {
          newAnnouncements.push({
            id: `achievement_${attempt.id}_${Date.now()}`,
            title: `🏆 Outstanding Achievement!`,
            content: `${warrior.name} has earned ${attempt.score} points by solving a challenging puzzle! Their dedication and skill continue to inspire the entire squad. Congratulations on this remarkable achievement!`,
            type: 'achievement',
            author: 'Royal Warriors Squad',
            createdAt: new Date().toISOString(),
            isActive: true,
            priority: 'high',
            autoGenerated: true,
            relatedData: { 
              attemptId: attempt.id, 
              userId: warrior.id, 
              userName: warrior.name, 
              score: attempt.score 
            }
          });
        }
      });

      // Generate news announcements
      recentNews.slice(0, 2).forEach(article => {
        newAnnouncements.push({
          id: `news_${article.id}_${Date.now()}`,
          title: `📰 Latest Tech Update`,
          content: `New article published: "${article.title}". Stay updated with the latest in ${article.category.toUpperCase()} and expand your knowledge as a true warrior of technology!`,
          type: 'news',
          author: 'Royal Warriors Squad',
          createdAt: new Date().toISOString(),
          isActive: true,
          priority: 'low',
          autoGenerated: true,
          relatedData: { 
            articleId: article.id, 
            articleTitle: article.title,
            category: article.category
          }
        });
      });

      if (newAnnouncements.length > 0) {
        setAnnouncements(prev => [...newAnnouncements, ...prev]);
        newAnnouncements.forEach(announcement => {
          broadcastUpdate('auto_announcement_created', announcement);
        });
      }
    };

    // Run immediately and then every 5 minutes
    generateAutoAnnouncements();
    const interval = setInterval(generateAutoAnnouncements, 5 * 60 * 1000);

    return () => clearInterval(interval);
  }, [accounts, attempts, newsArticles, announcements, setAnnouncements, broadcastUpdate]);

  // Subscribe to real-time updates
  useEffect(() => {
    const unsubscribe = subscribe((type, data) => {
      if (type === 'puzzle_solved' && data.score >= 15) {
        // Auto-generate achievement announcement for high scores
        const warrior = accounts.find(acc => acc.id === data.userId);
        if (warrior) {
          const announcement: Announcement = {
            id: `achievement_${data.attemptId}_${Date.now()}`,
            title: `🏆 Exceptional Performance!`,
            content: `${warrior.name} just earned ${data.score} points! Their problem-solving skills continue to amaze the entire Royal Warriors Squad. Keep up the excellent work!`,
            type: 'achievement',
            author: 'Royal Warriors Squad',
            createdAt: new Date().toISOString(),
            isActive: true,
            priority: 'high',
            autoGenerated: true,
            relatedData: { 
              attemptId: data.attemptId, 
              userId: warrior.id, 
              userName: warrior.name, 
              score: data.score 
            }
          };
          setAnnouncements(prev => [announcement, ...prev]);
        }
      }
    });

    return unsubscribe;
  }, [subscribe, accounts, setAnnouncements]);

  const handleAddAnnouncement = () => {
    if (!newAnnouncement.title || !newAnnouncement.content || !user) return;

    const announcement: Announcement = {
      id: Date.now().toString(),
      ...newAnnouncement,
      author: user.username,
      createdAt: new Date().toISOString(),
      isActive: true,
      autoGenerated: false
    };

    const updatedAnnouncements = [announcement, ...announcements];
    setAnnouncements(updatedAnnouncements);
    broadcastUpdate('announcement_added', announcement);
    
    setNewAnnouncement({ title: '', content: '', type: 'info', priority: 'medium' });
    setIsAddingNew(false);
  };

  const handleEditAnnouncement = (announcement: Announcement) => {
    if (editingAnnouncement?.id === announcement.id) {
      const updatedAnnouncement = {
        ...announcement,
        ...newAnnouncement,
        updatedAt: new Date().toISOString()
      };
      
      const updatedAnnouncements = announcements.map(a => 
        a.id === announcement.id ? updatedAnnouncement : a
      );
      setAnnouncements(updatedAnnouncements);
      broadcastUpdate('announcement_updated', updatedAnnouncement);
      
      setEditingAnnouncement(null);
      setNewAnnouncement({ title: '', content: '', type: 'info', priority: 'medium' });
    } else {
      setEditingAnnouncement(announcement);
      setNewAnnouncement({
        title: announcement.title,
        content: announcement.content,
        type: announcement.type,
        priority: announcement.priority
      });
    }
  };

  const handleDeleteAnnouncement = (id: string) => {
    const updatedAnnouncements = announcements.filter(announcement => announcement.id !== id);
    setAnnouncements(updatedAnnouncements);
    broadcastUpdate('announcement_deleted', { id });
  };

  const getAnnouncementIcon = (type: string) => {
    switch (type) {
      case 'warning': return AlertCircle;
      case 'success': return CheckCircle;
      case 'urgent': return Megaphone;
      case 'achievement': return Trophy;
      case 'news': return Newspaper;
      case 'welcome': return Crown;
      default: return Info;
    }
  };

  const getAnnouncementColors = (type: string) => {
    switch (type) {
      case 'warning': return 'border-yellow-500/30 bg-yellow-500/10 text-yellow-400';
      case 'success': return 'border-green-500/30 bg-green-500/10 text-green-400';
      case 'urgent': return 'border-red-500/30 bg-red-500/10 text-red-400';
      case 'achievement': return 'border-purple-500/30 bg-purple-500/10 text-purple-400';
      case 'news': return 'border-blue-500/30 bg-blue-500/10 text-blue-400';
      case 'welcome': return 'border-yellow-500/30 bg-yellow-500/10 text-yellow-400';
      default: return 'border-cyan-500/30 bg-cyan-500/10 text-cyan-400';
    }
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      default: return 'bg-green-500/20 text-green-400 border-green-500/30';
    }
  };

  const sortedAnnouncements = announcements
    .filter(a => a.isActive)
    .sort((a, b) => {
      // Sort by priority first, then by date
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
      if (priorityDiff !== 0) return priorityDiff;
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

  return (
    <div className="min-h-screen pt-20 pb-12">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <div className="inline-flex items-center px-6 py-3 rounded-2xl bg-gradient-to-r from-orange-600/20 to-red-600/20 backdrop-blur-xl border border-orange-500/30 mb-8 shadow-lg shadow-orange-500/10">
            <Megaphone className="w-6 h-6 text-orange-400 mr-3 animate-pulse" />
            <span className="text-lg font-semibold text-orange-400">Royal Proclamations</span>
          </div>
          <h1 className="text-5xl md:text-7xl font-bold mb-8 bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent animate-gradient">
            Announcements
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto leading-relaxed">
            Stay informed with the latest updates, achievements, and important information from the Royal Warriors Squad
          </p>
        </motion.div>

        {/* Stats Overview */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="grid md:grid-cols-4 gap-6 mb-12"
        >
          <GlassCard className="p-6 text-center border-blue-500/20 hover:border-blue-400/40 transition-all duration-500">
            <Info className="w-8 h-8 text-blue-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-blue-400 mb-1">
              {announcements.filter(a => a.type === 'info' && a.isActive).length}
            </div>
            <div className="text-sm text-gray-400">General Updates</div>
          </GlassCard>
          
          <GlassCard className="p-6 text-center border-purple-500/20 hover:border-purple-400/40 transition-all duration-500">
            <Trophy className="w-8 h-8 text-purple-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-purple-400 mb-1">
              {announcements.filter(a => a.type === 'achievement' && a.isActive).length}
            </div>
            <div className="text-sm text-gray-400">Achievements</div>
          </GlassCard>
          
          <GlassCard className="p-6 text-center border-yellow-500/20 hover:border-yellow-400/40 transition-all duration-500">
            <Crown className="w-8 h-8 text-yellow-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-yellow-400 mb-1">
              {announcements.filter(a => a.type === 'welcome' && a.isActive).length}
            </div>
            <div className="text-sm text-gray-400">New Warriors</div>
          </GlassCard>
          
          <GlassCard className="p-6 text-center border-green-500/20 hover:border-green-400/40 transition-all duration-500">
            <Newspaper className="w-8 h-8 text-green-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-green-400 mb-1">
              {announcements.filter(a => a.type === 'news' && a.isActive).length}
            </div>
            <div className="text-sm text-gray-400">News Updates</div>
          </GlassCard>
        </motion.div>

        {/* Add Announcement Button - Admin Only */}
        {isAdmin && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8 text-center"
          >
            {!isAddingNew ? (
              <AnimatedButton
                onClick={() => setIsAddingNew(true)}
                className="inline-flex items-center space-x-2"
                aria-label="Add New Announcement"
              >
                <Plus className="w-5 h-5" />
                <span>Add Announcement</span>
              </AnimatedButton>
            ) : (
              <div className="max-w-xl mx-auto bg-white/10 backdrop-blur-md p-6 rounded-lg shadow-lg border border-white/20">
                <input
                  type="text"
                  placeholder="Title"
                  value={newAnnouncement.title}
                  onChange={e => setNewAnnouncement({ ...newAnnouncement, title: e.target.value })}
                  className="w-full mb-3 p-3 rounded bg-white/20 text-white border border-white/30 placeholder-white/50"
                />
                <textarea
                  placeholder="Content"
                  value={newAnnouncement.content}
                  onChange={e => setNewAnnouncement({ ...newAnnouncement, content: e.target.value })}
                  rows={4}
                  className="w-full mb-3 p-3 rounded bg-white/20 text-white border border-white/30 placeholder-white/50 resize-none"
                />
                <div className="flex space-x-3 mb-3">
                  <select
                    value={newAnnouncement.type}
                    onChange={e => setNewAnnouncement({ ...newAnnouncement, type: e.target.value as Announcement['type'] })}
                    className="flex-1 p-2 rounded bg-white/20 text-white border border-white/30"
                  >
                    <option value="info">Info</option>
                    <option value="warning">Warning</option>
                    <option value="success">Success</option>
                    <option value="urgent">Urgent</option>
                    <option value="achievement">Achievement</option>
                    <option value="news">News</option>
                    <option value="welcome">Welcome</option>
                  </select>
                  <select
                    value={newAnnouncement.priority}
                    onChange={e => setNewAnnouncement({ ...newAnnouncement, priority: e.target.value as Announcement['priority'] })}
                    className="w-28 p-2 rounded bg-white/20 text-white border border-white/30"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
                <div className="flex justify-end space-x-3">
                  <AnimatedButton
                    onClick={() => {
                      setIsAddingNew(false);
                      setNewAnnouncement({ title: '', content: '', type: 'info', priority: 'medium' });
                    }}
                    className="bg-red-500 hover:bg-red-600"
                  >
                    Cancel
                  </AnimatedButton>
                  <AnimatedButton onClick={handleAddAnnouncement}>Save</AnimatedButton>
                </div>
              </div>
            )}
          </motion.div>
        )}

        {/* Announcements List */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="space-y-6"
        >
          {sortedAnnouncements.length === 0 && (
            <p className="text-center text-gray-400 dark:text-gray-600">
              No active announcements at this time.
            </p>
          )}

          {sortedAnnouncements.map(announcement => {
            const Icon = getAnnouncementIcon(announcement.type);
            const colors = getAnnouncementColors(announcement.type);
            const priorityBadge = getPriorityBadge(announcement.priority);

            return (
              <GlassCard
                key={announcement.id}
                className={`border ${colors} p-6 shadow-lg hover:shadow-xl transition-shadow duration-300`}
              >
                <div className="flex justify-between items-start">
                  <div className="flex items-center space-x-4">
                    <Icon className="w-8 h-8 flex-shrink-0" />
                    <div>
                      <h3 className="text-xl font-semibold">{announcement.title}</h3>
                      <div className={`inline-block mt-1 px-2 py-0.5 rounded text-sm font-semibold border ${priorityBadge}`}>
                        {announcement.priority.toUpperCase()}
                      </div>
                    </div>
                  </div>
                  {isAdmin && (
                    <div className="flex space-x-2">
                      <AnimatedButton
                        onClick={() => handleEditAnnouncement(announcement)}
                        aria-label="Edit Announcement"
                        className="p-1 text-yellow-400 hover:text-yellow-500"
                      >
                        <Edit className="w-5 h-5" />
                      </AnimatedButton>
                      <AnimatedButton
                        onClick={() => handleDeleteAnnouncement(announcement.id)}
                        aria-label="Delete Announcement"
                        className="p-1 text-red-400 hover:text-red-500"
                      >
                        <Trash2 className="w-5 h-5" />
                      </AnimatedButton>
                    </div>
                  )}
                </div>
                <p className="mt-4 text-lg leading-relaxed whitespace-pre-line">
                  {announcement.content}
                </p>
                <div className="mt-4 text-sm text-gray-400">
                  Posted by <span className="font-semibold">{announcement.author}</span> on{' '}
                  {format(new Date(announcement.createdAt), 'PPP p')}
                </div>
              </GlassCard>
            );
          })}
        </motion.div>
      </div>
    </div>
  );
};
